import React from 'react'
import { Container, Row, Col } from 'components/bootstrap'
import cx from 'classnames'
import compileLscToJs from 'util/compileLscToJs'

import reactExample from '!raw!./reactExample.lsc.txt'

// HACK: can't load Ace during ssr
let AceEditor
if typeof window != 'undefined' and window:
  now AceEditor = require('react-ace').default
  require('brace')
  require('brace/mode/jsx')
  require('util/braceLscMode')
  require('brace/theme/chrome')

styles = {
  heroSubtitle: {
    color: 'hsla(203, 7%, 30%, 1)'
  }
  codeWrapper: {
    boxShadow: '0px 0px 6px 1px rgba(0,0,0,.1)'
  }
}

Hero() ->
  <div className="py-4 mt-n1 hero">
    <center className="pt-7 pb-3">
      <h1 style={styles.heroTitle}>@oigroup/LightScript</h1>
      <h3 className="pt-2" style={styles.heroSubtitle}>
        A futuristic branch of the <a href="https://lightscript.org">LightScript</a> language
      </h3>
    </center>

    <Container>
      <Row className="justify-content-sm-center">
        <Col sm={8}>
          <center>
            <p className="lead pt-4">
              The amazing LightScript core language, with a bunch of extra fixes, features, tools, and docs.
            </p>
            <p className="lead pb-6">
              Designed to make programmers considerably more productive!
            </p>
          </center>
        </Col>
      </Row>
    </Container>
  </div>

CodeColTitle({ children }) =>
  <div className="code-group-title w-100 px-3 py-1 text-center">
    {children}
  </div>

CodeCol({ code, syntax, title, onChange }) =>
  if not AceEditor:
    return <Col sm="6" className={cx("p-3", syntax)}><pre>{code}</pre></Col>
  mode =
    if syntax == "js": "jsx"
    else: syntax
  numLines = code.split('\n').length

  <Col sm="6" className={cx('p-0', syntax)}>
    <CodeColTitle>
      {title}
    </CodeColTitle>
    <div className="p-3">
      <AceEditor
        mode={mode}
        theme="chrome"
        value={code}
        height='100%'
        width='100%'
        style={{
          backgroundColor: 'transparent'
        }}
        minLines={numLines}
        maxLines={numLines}
        showGutter={false}
        tabSize={2}
        onChange={onChange}
        readOnly={syntax == 'js'}
        name={`ace-${syntax}`}
        highlightActiveLine={syntax != 'js'}
      />
    </div>
  </Col>
CodeCol.propTypes = {
  code: React.PropTypes.string.isRequired
  title: React.PropTypes.string.isRequired
  syntax: React.PropTypes.oneOf(['lsc', 'js']).isRequired
  onChange: React.PropTypes.func
}

class CompiledCode extends React.Component:
  constructor(props) ->
    { lsc } = props
    this.state = { lsc }

  static propTypes = {
    lsc: React.PropTypes.string.isRequired
  }

  // TODO: use =>
  updateLsc(lsc): void ->
    this.setState({ lsc })

  render() ->
    lsc = this.state.lsc
    js = compileLscToJs(lsc)

    lscTitle = '(editable) LightScript in...'
    jsTitle = '...JavaScript out.'

    <Row className="mb-3 compiled-code-group compiled-code-group-ace">
      <CodeCol code={lsc} syntax="lsc" title={lscTitle} onChange={(lsc) => this.updateLsc(lsc)} />
      <CodeCol code={js} syntax="js" title={jsTitle} />
    </Row>

ReactExample() =>
  <Row className="justify-content-sm-center mt-n3">
    <Col sm={10}>
      <CompiledCode lsc={reactExample.trim()} />
    </Col>
  </Row>

HomepageSection({ children }) ->
  <Row className="justify-content-sm-center my-5">
    <Col sm={8}>
      {children}
    </Col>
  </Row>


WhyLightScript() =>
  <HomepageSection>
    <h3>Why LightScript?</h3>

    <p>
      Developers care about syntax for a reason.
      Not only is concise syntax faster to read and faster to write,
      all syntax guides how you write code â€“ for better and for worse.
      If "the right way" is verbose or awkward,
      developers too often choose the wrong way.
    </p>
    <p>
      Writing maintainable, correct, performant code should be the default.
    </p>
    <p>
      LightScript aims to align "the easy way" and "the right way"
      by giving best practices and functional idioms
      the approachability of Ruby and Python.
    </p>
    <p>
      Interoperability with JavaScript is at the core of the language;
      it is implemented as a fork of Babel's parser, and functions as a
      superset of ES7 with minimal backwards-incompatibilities.
    </p>
  </HomepageSection>

Installation() =>
  <HomepageSection>
    <h3>Installation & Usage</h3>

    <p>
      Install the Babel preset:
    </p>
    <h4>
      <code>$ npm install @oigroup/babel-preset-lightscript</code>
    </h4>

    <p>
      Add to <code>.babelrc</code>:
    </p>

    <p>
      <pre><code>
{`
{
  "presets": [
    [
      "@oigroup/babel-preset-lightscript",
      {
        "env": { "targets": { "ie": 10 } }
      }
    ]
  ]
}`}
      </code></pre>
    </p>

    <p>
      When the preset is enabled, LightScript will automatically process files with
      <code>.lsc</code> or <code>.lsx</code> in the filename. Once <code>.babelrc</code> is set up, just run:
    </p>
    <p>
      <code>$ babel -x .lsc</code>
    </p>
    <p>
      If you're using webpack, add the preset to your babel-loader:
    </p>
    <p>
      <pre><code>{`
test: /\.(lsc|jsx?)/,
loader: 'babel-loader',
query: {
  presets: ['@oigroup/babel-preset-lightscript']
}
      `}</code></pre>
    </p>
  </HomepageSection>

ProjectStatus() =>
  <HomepageSection>
    <h3>Project Status</h3>
    <p>
      <em>(Oct 2017, @wcjohnson)</em>
    </p>
    <p>
      @oigroup/lightscript should be considered beta-quality software. I personally use
      LightScript in every new project where I have a say, including several
      applications deployed in production; however, I have certainly run into
      and fixed the occasional bug along the way.
    </p>
    <p>
      See the <a href="docs/#tooling">Tooling</a> section of the docs for more information
      on the tooling ecosystem. As of right now, @oigroup/lightscript has working
      (though immature) linting, code coverage, and syntax highlighting.
    </p>
    <p>
      There are several good examples of LightScript in the wild:
      <ul>
        <li>The <a href="https://github.com/wcjohnson/babel-plugin-lightscript/tree/oigroup/src">@oigroup/lightscript Babel transformations</a> are self-hosting and written in LightScript. I make it a point to flex all the features of the language within the compiler, so it's a good place to look for complex examples.</li>
        <li><a href="https://wcjohnson.github.io/lscdiag/">lscdiag</a>, a LightScript repl and diagnostic tool, is <a href="https://github.com/wcjohnson/lscdiag/tree/master/src">written in LightScript</a>. It was designed using tech from the forefront of the React ecosystem, such as Redux and Recompose, and is a good example of using LightScript to build an idiomatic React application of moderate complexity.
        </li>
      </ul>
    </p>
  </HomepageSection>

CompletedFeatures() =>
  <HomepageSection>
    <h3>Features</h3>
    <p>
      <em>In addition to all all ES7, JSX, and Flow features:</em>
    </p>

    <ul>
      <li>(Optional) Significant Indentation</li>
      <li>Implicit Returns</li>
      <li>If Expressions</li>
      <li>Auto const</li>
      <li>Async/Await shorthand</li>
      <li>Safe-Await</li>
      <li>Readable Operators (or, and, ==, etc)</li>
      <li>Bound Methods</li>
      <li>Commaless Objects and Arrays</li>
      <li>Automatic Semicolon Insertion that always works</li>
      <li>Array & Object for-loops</li>
      <li>Spread for-loops</li>
      <li>Pattern Matching</li>
    </ul>
  </HomepageSection>

export default () =>
  <div className="pb-6">
    <Hero />

    <Container>
      <ReactExample />

      <WhyLightScript />

      <Installation />

      <CompletedFeatures />

      <ProjectStatus />

    </Container>
  </div>
