// C/P "fork" of https://github.com/mapbox/remark-react/blob/master/index.js

import toHAST from 'mdast-util-to-hast'
import sanitize from 'hast-util-sanitize'
import toH from 'hast-to-hyperscript'
import React from 'react'

detab = require('detab')
u = require('unist-builder')

handlers = {
  code(h, node) ->
    var value = node.value ? detab(node.value + '\n') : ''
    var lang = node.lang
    var props = {}

    if lang == null or lang == "compiled_lsc":
      h(node, 'CompiledCode', { lsc: value })
    else:
      h(node, 'RawCode', { code: value })
}

export default plugin(options) -> {
  settings = options or {}
  createElement = settings.createElement or React.createElement
  components = settings.remarkReactComponents or {}
  clean = settings.sanitize != false
  scheme = if clean and (typeof settings.sanitize != 'boolean'): settings.sanitize
  toHastOptions = { handlers }
  traverse = options.traverse or null

  h(name, props, children) -> {
    component = components[name] or name

    now children = if children: children.filter((child) -> child != '\n')

    createElement(component, props, children)
  }

  // fake class b/c it breaks with a real one
  compile(node) -> {
    let hast = {
      type: 'element'
      tagName: 'div'
      properties: {}
      children: toHAST(node, toHastOptions).children
    }

    //if clean: now hast = sanitize(hast, scheme)
    if traverse: now hast = traverse(hast)

    toH(h, hast, settings.prefix)
  }

  this.Compiler = compile

  return
}
